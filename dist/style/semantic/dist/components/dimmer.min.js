"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * # Semantic UI 2.2.10 - Dimmer
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
!function (e, i, n, t) {
  "use strict";
  i = "undefined" != typeof i && i.Math == Math ? i : "undefined" != typeof self && self.Math == Math ? self : Function("return this")(), e.fn.dimmer = function (i) {
    var o,
        a = e(this),
        r = new Date().getTime(),
        s = [],
        m = arguments[0],
        d = "string" == typeof m,
        c = [].slice.call(arguments, 1);return a.each(function () {
      var u,
          l,
          f,
          g = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.dimmer.settings, i) : e.extend({}, e.fn.dimmer.settings),
          p = g.selector,
          h = g.namespace,
          b = g.className,
          v = g.error,
          y = "." + h,
          C = "module-" + h,
          w = a.selector || "",
          S = "ontouchstart" in n.documentElement ? "touchstart" : "click",
          D = e(this),
          T = this,
          N = D.data(C);f = { preinitialize: function preinitialize() {
          f.is.dimmer() ? (l = D.parent(), u = D) : (l = D, u = f.has.dimmer() ? g.dimmerName ? l.find(p.dimmer).filter("." + g.dimmerName) : l.find(p.dimmer) : f.create(), f.set.variation());
        }, initialize: function initialize() {
          f.debug("Initializing dimmer", g), f.bind.events(), f.set.dimmable(), f.instantiate();
        }, instantiate: function instantiate() {
          f.verbose("Storing instance of module", f), N = f, D.data(C, N);
        }, destroy: function destroy() {
          f.verbose("Destroying previous module", u), f.unbind.events(), f.remove.variation(), l.off(y);
        }, bind: { events: function events() {
            "hover" == g.on ? l.on("mouseenter" + y, f.show).on("mouseleave" + y, f.hide) : "click" == g.on && l.on(S + y, f.toggle), f.is.page() && (f.debug("Setting as a page dimmer", l), f.set.pageDimmer()), f.is.closable() && (f.verbose("Adding dimmer close event", u), l.on(S + y, p.dimmer, f.event.click));
          } }, unbind: { events: function events() {
            D.removeData(C), l.off(y);
          } }, event: { click: function click(i) {
            f.verbose("Determining if event occured on dimmer", i), (0 === u.find(i.target).length || e(i.target).is(p.content)) && (f.hide(), i.stopImmediatePropagation());
          } }, addContent: function addContent(i) {
          var n = e(i);f.debug("Add content to dimmer", n), n.parent()[0] !== u[0] && n.detach().appendTo(u);
        }, create: function create() {
          var i = e(g.template.dimmer());return g.dimmerName && (f.debug("Creating named dimmer", g.dimmerName), i.addClass(g.dimmerName)), i.appendTo(l), i;
        }, show: function show(i) {
          i = e.isFunction(i) ? i : function () {}, f.debug("Showing dimmer", u, g), f.is.dimmed() && !f.is.animating() || !f.is.enabled() ? f.debug("Dimmer is already shown or disabled") : (f.animate.show(i), g.onShow.call(T), g.onChange.call(T));
        }, hide: function hide(i) {
          i = e.isFunction(i) ? i : function () {}, f.is.dimmed() || f.is.animating() ? (f.debug("Hiding dimmer", u), f.animate.hide(i), g.onHide.call(T), g.onChange.call(T)) : f.debug("Dimmer is not visible");
        }, toggle: function toggle() {
          f.verbose("Toggling dimmer visibility", u), f.is.dimmed() ? f.hide() : f.show();
        }, animate: { show: function show(i) {
            i = e.isFunction(i) ? i : function () {}, g.useCSS && e.fn.transition !== t && u.transition("is supported") ? ("auto" !== g.opacity && f.set.opacity(), u.transition({ animation: g.transition + " in", queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart: function onStart() {
                f.set.dimmed();
              }, onComplete: function onComplete() {
                f.set.active(), i();
              } })) : (f.verbose("Showing dimmer animation with javascript"), f.set.dimmed(), "auto" == g.opacity && (g.opacity = .8), u.stop().css({ opacity: 0, width: "100%", height: "100%" }).fadeTo(f.get.duration(), g.opacity, function () {
              u.removeAttr("style"), f.set.active(), i();
            }));
          }, hide: function hide(i) {
            i = e.isFunction(i) ? i : function () {}, g.useCSS && e.fn.transition !== t && u.transition("is supported") ? (f.verbose("Hiding dimmer with css"), u.transition({ animation: g.transition + " out", queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart: function onStart() {
                f.remove.dimmed();
              }, onComplete: function onComplete() {
                f.remove.active(), i();
              } })) : (f.verbose("Hiding dimmer with javascript"), f.remove.dimmed(), u.stop().fadeOut(f.get.duration(), function () {
              f.remove.active(), u.removeAttr("style"), i();
            }));
          } }, get: { dimmer: function dimmer() {
            return u;
          }, duration: function duration() {
            return "object" == _typeof(g.duration) ? f.is.active() ? g.duration.hide : g.duration.show : g.duration;
          } }, has: { dimmer: function dimmer() {
            return g.dimmerName ? D.find(p.dimmer).filter("." + g.dimmerName).length > 0 : D.find(p.dimmer).length > 0;
          } }, is: { active: function active() {
            return u.hasClass(b.active);
          }, animating: function animating() {
            return u.is(":animated") || u.hasClass(b.animating);
          }, closable: function closable() {
            return "auto" == g.closable ? "hover" != g.on : g.closable;
          }, dimmer: function dimmer() {
            return D.hasClass(b.dimmer);
          }, dimmable: function dimmable() {
            return D.hasClass(b.dimmable);
          }, dimmed: function dimmed() {
            return l.hasClass(b.dimmed);
          }, disabled: function disabled() {
            return l.hasClass(b.disabled);
          }, enabled: function enabled() {
            return !f.is.disabled();
          }, page: function page() {
            return l.is("body");
          }, pageDimmer: function pageDimmer() {
            return u.hasClass(b.pageDimmer);
          } }, can: { show: function show() {
            return !u.hasClass(b.disabled);
          } }, set: { opacity: function opacity(e) {
            var i = u.css("background-color"),
                n = i.split(","),
                t = n && 3 == n.length,
                o = n && 4 == n.length;e = 0 === g.opacity ? 0 : g.opacity || e, t || o ? (n[3] = e + ")", i = n.join(",")) : i = "rgba(0, 0, 0, " + e + ")", f.debug("Setting opacity to", e), u.css("background-color", i);
          }, active: function active() {
            u.addClass(b.active);
          }, dimmable: function dimmable() {
            l.addClass(b.dimmable);
          }, dimmed: function dimmed() {
            l.addClass(b.dimmed);
          }, pageDimmer: function pageDimmer() {
            u.addClass(b.pageDimmer);
          }, disabled: function disabled() {
            u.addClass(b.disabled);
          }, variation: function variation(e) {
            e = e || g.variation, e && u.addClass(e);
          } }, remove: { active: function active() {
            u.removeClass(b.active);
          }, dimmed: function dimmed() {
            l.removeClass(b.dimmed);
          }, disabled: function disabled() {
            u.removeClass(b.disabled);
          }, variation: function variation(e) {
            e = e || g.variation, e && u.removeClass(e);
          } }, setting: function setting(i, n) {
          if (f.debug("Changing setting", i, n), e.isPlainObject(i)) e.extend(!0, g, i);else {
            if (n === t) return g[i];e.isPlainObject(g[i]) ? e.extend(!0, g[i], n) : g[i] = n;
          }
        }, internal: function internal(i, n) {
          if (e.isPlainObject(i)) e.extend(!0, f, i);else {
            if (n === t) return f[i];f[i] = n;
          }
        }, debug: function debug() {
          !g.silent && g.debug && (g.performance ? f.performance.log(arguments) : (f.debug = Function.prototype.bind.call(console.info, console, g.name + ":"), f.debug.apply(console, arguments)));
        }, verbose: function verbose() {
          !g.silent && g.verbose && g.debug && (g.performance ? f.performance.log(arguments) : (f.verbose = Function.prototype.bind.call(console.info, console, g.name + ":"), f.verbose.apply(console, arguments)));
        }, error: function error() {
          g.silent || (f.error = Function.prototype.bind.call(console.error, console, g.name + ":"), f.error.apply(console, arguments));
        }, performance: { log: function log(e) {
            var i, n, t;g.performance && (i = new Date().getTime(), t = r || i, n = i - t, r = i, s.push({ Name: e[0], Arguments: [].slice.call(e, 1) || "", Element: T, "Execution Time": n })), clearTimeout(f.performance.timer), f.performance.timer = setTimeout(f.performance.display, 500);
          }, display: function display() {
            var i = g.name + ":",
                n = 0;r = !1, clearTimeout(f.performance.timer), e.each(s, function (e, i) {
              n += i["Execution Time"];
            }), i += " " + n + "ms", w && (i += " '" + w + "'"), a.length > 1 && (i += " (" + a.length + ")"), (console.group !== t || console.table !== t) && s.length > 0 && (console.groupCollapsed(i), console.table ? console.table(s) : e.each(s, function (e, i) {
              console.log(i.Name + ": " + i["Execution Time"] + "ms");
            }), console.groupEnd()), s = [];
          } }, invoke: function invoke(i, n, a) {
          var r,
              s,
              m,
              d = N;return n = n || c, a = T || a, "string" == typeof i && d !== t && (i = i.split(/[\. ]/), r = i.length - 1, e.each(i, function (n, o) {
            var a = n != r ? o + i[n + 1].charAt(0).toUpperCase() + i[n + 1].slice(1) : i;if (e.isPlainObject(d[a]) && n != r) d = d[a];else {
              if (d[a] !== t) return s = d[a], !1;if (!e.isPlainObject(d[o]) || n == r) return d[o] !== t ? (s = d[o], !1) : (f.error(v.method, i), !1);d = d[o];
            }
          })), e.isFunction(s) ? m = s.apply(a, n) : s !== t && (m = s), e.isArray(o) ? o.push(m) : o !== t ? o = [o, m] : m !== t && (o = m), s;
        } }, f.preinitialize(), d ? (N === t && f.initialize(), f.invoke(m)) : (N !== t && N.invoke("destroy"), f.initialize());
    }), o !== t ? o : this;
  }, e.fn.dimmer.settings = { name: "Dimmer", namespace: "dimmer", silent: !1, debug: !1, verbose: !1, performance: !0, dimmerName: !1, variation: !1, closable: "auto", useCSS: !0, transition: "fade", on: !1, opacity: "auto", duration: { show: 500, hide: 500 }, onChange: function onChange() {}, onShow: function onShow() {}, onHide: function onHide() {}, error: { method: "The method you called is not defined." }, className: { active: "active", animating: "animating", dimmable: "dimmable", dimmed: "dimmed", dimmer: "dimmer", disabled: "disabled", hide: "hide", pageDimmer: "page", show: "show" }, selector: { dimmer: "> .ui.dimmer", content: ".ui.dimmer > .content, .ui.dimmer > .content > .center" }, template: { dimmer: function dimmer() {
        return e("<div />").attr("class", "ui dimmer");
      } } };
}(jQuery, window, document);